{"/home/travis/build/npmtest/node-npmtest-audio-metadata/test.js":"/* istanbul instrument in package npmtest_audio_metadata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-audio-metadata/lib.npmtest_audio_metadata.js":"/* istanbul instrument in package npmtest_audio_metadata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_audio_metadata = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_audio_metadata = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-audio-metadata/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-audio-metadata && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_audio_metadata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_audio_metadata\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_audio_metadata.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_audio_metadata.rollup.js'] =\n            local.assetsDict['/assets.npmtest_audio_metadata.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_audio_metadata.__dirname + '/lib.npmtest_audio_metadata.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/index.js":"module.exports = {\n\togg: require('./src/ogg'),\n\tid3v1: require('./src/id3v1'),\n\tid3v2: require('./src/id3v2')\n};\n","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/src/ogg.js":"var utils = require('./utils');\n\n/**\n * See http://www.ietf.org/rfc/rfc3533.txt\n * @param {Buffer|ArrayBuffer} buffer\n */\nmodule.exports = function(buffer) {\n\tvar view = utils.createView(buffer);\n\n\tfunction parsePage(offset, withPacket) {\n\t\tif (view.byteLength < offset + 27) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar numPageSegments = view.getUint8(offset + 26),\n\t\t\tsegmentTable = utils.readBytes(view, offset + 27, numPageSegments),\n\t\t\theaderSize = 27 + numPageSegments;\n\n\t\tif (!segmentTable.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar\n\t\t\tpageSize = headerSize + segmentTable.reduce(function(cur, next) {\n\t\t\t\treturn cur + next;\n\t\t\t}),\n\t\t\tlength = headerSize + 1 + 'vorbis'.length,\n\t\t\tpacketView = null;\n\n\t\tif (withPacket) {\n\t\t\tpacketView = utils.createView(new ArrayBuffer(pageSize - length));\n\t\t\tutils.readBytes(view, offset + length, pageSize - length, packetView);\n\t\t}\n\n\t\treturn {\n\t\t\tpageSize: pageSize,\n\t\t\tpacket: packetView\n\t\t};\n\t}\n\n\tfunction parseComments(packet) {\n\t\ttry {\n\t\t\tvar vendorLength = packet.getUint32(0, true),\n\t\t\t\tcommentListLength = packet.getUint32(4 + vendorLength, true),\n\t\t\t\tcomments = {},\n\t\t\t\toffset = 8 + vendorLength,\n\t\t\t\tmap = {\n\t\t\t\t\ttracknumber: 'track'\n\t\t\t\t};\n\n\t\t\tfor (var i = 0; i < commentListLength; i++) {\n\t\t\t\tvar commentLength = packet.getUint32(offset, true),\n\t\t\t\t\tcomment = utils.readUtf8(packet, offset + 4, commentLength),\n\t\t\t\t\tequals = comment.indexOf('='),\n\t\t\t\t\tkey = comment.substring(0, equals).toLowerCase();\n\n\t\t\t\tcomments[map[key] || key] = comments[key] = utils.trimNull(comment.substring(equals + 1));\n\t\t\t\toffset += 4 + commentLength;\n\t\t\t}\n\n\t\t\treturn comments;\n\t\t} catch (e) {\n\t\t\t//all exceptions are just malformed/truncated data, so we just ignore them\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvar id = parsePage(0);\n\tif (!id) {\n\t\treturn null;\n\t}\n\n\tvar commentHeader = parsePage(id.pageSize, true);\n\tif (!commentHeader) {\n\t\treturn null;\n\t}\n\n\treturn parseComments(commentHeader.packet);\n};","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/src/utils.js":"function toArrayBuffer(buffer) {\n\tvar arrayBuffer = new ArrayBuffer(buffer.length);\n\tvar view = new Uint8Array(arrayBuffer);\n\tfor (var i = 0; i < buffer.length; ++i) {\n\t\tview[i] = buffer[i];\n\t}\n\treturn arrayBuffer;\n}\n\nmodule.exports = {\n\ttrimNull: function(s) {\n\t\treturn s.replace(/\\u0000+$/, '');\n\t},\n\n\tcreateView: function(buffer) {\n\t\tif (typeof(Buffer) !== 'undefined' && buffer instanceof Buffer) {\n\t\t\t//convert nodejs buffers to ArrayBuffer\n\t\t\tbuffer = toArrayBuffer(buffer);\n\t\t}\n\n\t\tif (!(buffer instanceof ArrayBuffer)) {\n\t\t\tthrow new Error('Expected instance of Buffer or ArrayBuffer');\n\t\t}\n\n\t\treturn new DataView(buffer);\n\t},\n\n\treadBytes: function(view, offset, length, target) {\n\t\tif (offset + length < 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tvar bytes = [];\n\t\tvar max = Math.min(offset + length, view.byteLength);\n\t\tfor (var i = offset; i < max; i++) {\n\t\t\tvar value = view.getUint8(i);\n\t\t\tbytes.push(value);\n\t\t\tif (target) {\n\t\t\t\ttarget.setUint8(i - offset, value);\n\t\t\t}\n\t\t}\n\n\t\treturn bytes;\n\t},\n\n\treadAscii: function(view, offset, length) {\n\t\tif (view.byteLength < offset + length) {\n\t\t\treturn '';\n\t\t}\n\t\tvar s = '';\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\ts += String.fromCharCode(view.getUint8(offset + i));\n\t\t}\n\n\t\treturn s;\n\t},\n\n\treadUtf8: function(view, offset, length) {\n\t\tif (view.byteLength < offset + length) {\n\t\t\treturn '';\n\t\t}\n\n\t\tvar buffer = view.buffer.slice(offset, offset + length);\n\n\t\t//http://stackoverflow.com/a/17192845 - convert byte array to UTF8 string\n\t\tvar encodedString = String.fromCharCode.apply(null, new Uint8Array(buffer));\n\t\treturn decodeURIComponent(escape(encodedString));\n\t}\n};","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/src/id3v1.js":"var utils = require('./utils');\n\nfunction checkMagicId3v1(view) {\n\tvar id3Magic = utils.readBytes(view, view.byteLength - 128, 3);\n\t//\"TAG\"\n\treturn id3Magic[0] === 84 && id3Magic[1] === 65 && id3Magic[2] === 71;\n}\n\nmodule.exports = function(buffer) {\n\t//read last 128 bytes\n\tvar view = utils.createView(buffer);\n\tif (!checkMagicId3v1(view)) {\n\t\treturn null;\n\t}\n\n\tfunction trim(value) {\n\t\treturn value.replace(/[\\s\\u0000]+$/, '');\n\t}\n\n\ttry {\n\t\tvar offset = view.byteLength - 128 + 3,\n\t\t\treadAscii = utils.readAscii;\n\t\tvar title = readAscii(view, offset, 30),\n\t\t\tartist = readAscii(view, offset + 30, 30),\n\t\t\talbum = readAscii(view, offset + 60, 30),\n\t\t\tyear = readAscii(view, offset + 90, 4);\n\n\t\toffset += 94;\n\n\t\tvar comment = readAscii(view, offset, 28),\n\t\t\ttrack = null;\n\t\toffset += 28;\n\t\tif (view.getUint8(offset) === 0) {\n\t\t\t//next byte is the track\n\t\t\ttrack = view.getUint8(offset + 1);\n\t\t} else {\n\t\t\tcomment += readAscii(view, offset, 2);\n\t\t}\n\n\t\toffset += 2;\n\t\tvar genre = view.getUint8(offset);\n\t\treturn {\n\t\t\ttitle: trim(title),\n\t\t\tartist: trim(artist),\n\t\t\talbum: trim(album),\n\t\t\tyear: trim(year),\n\t\t\tcomment: trim(comment),\n\t\t\ttrack: track,\n\t\t\tgenre: genre\n\t\t};\n\t} catch (e) {\n\t\treturn null;\n\t}\n};","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/src/id3v2.js":"var utils = require('./utils');\n\nfunction checkMagicId3(view, offset) {\n\tvar id3Magic = utils.readBytes(view, offset, 3);\n\t//\"ID3\"\n\treturn id3Magic[0] === 73 && id3Magic[1] === 68 && id3Magic[2] === 51;\n}\n\nfunction getUint28(view, offset) {\n\tvar sizeBytes = utils.readBytes(view, offset, 4);\n\tvar mask = 0xfffffff;\n\treturn ((sizeBytes[0] & mask) << 21) |\n\t\t((sizeBytes[1] & mask) << 14) |\n\t\t((sizeBytes[2] & mask) << 7) |\n\t\t(sizeBytes[3] & mask);\n}\n\n//http://id3.org/id3v2.3.0\n//http://id3.org/id3v2.4.0-structure\n//http://id3.org/id3v2.4.0-frames\nmodule.exports = function(buffer) {\n\tvar view = utils.createView(buffer);\n\tif (!checkMagicId3(view, 0)) {\n\t\treturn null;\n\t}\n\n\tvar offset = 3;\n\t//var majorVersion = view.getUint8(offset);\n\toffset += 2;\n\tvar flags = view.getUint8(offset);\n\toffset++;\n\tvar size = getUint28(view, offset);\n\toffset += 4;\n\n\tvar extendedHeader = (flags & 128) > 0;\n\n\tif (extendedHeader) {\n\t\toffset += getUint28(view, offset);\n\t}\n\n\tfunction readFrame(offset) {\n\t\ttry {\n\t\t\tvar id = utils.readAscii(view, offset, 4);\n\t\t\tvar size = getUint28(view, offset + 4);\n\t\t\toffset += 10; //+2 more for flags we don't care about\n\n\t\t\tif (id[0] !== 'T') {\n\t\t\t\treturn {\n\t\t\t\t\tid: id,\n\t\t\t\t\tsize: size + 10\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar encoding = view.getUint8(offset),\n\t\t\t\tdata = '';\n\n\t\t\tif (encoding <= 3) {\n\t\t\t\toffset++;\n\t\t\t\tif (encoding === 3) {\n\t\t\t\t\t//UTF8 - null terminated\n\t\t\t\t\tdata = utils.readUtf8(view, offset, size - 1);\n\t\t\t\t} else {\n\t\t\t\t\t//ISO-8859-1, UTF-16, UTF-16BE\n\t\t\t\t\t//UTF-16 and UTF-16BE are $FF $00 terminated\n\t\t\t\t\t//ISO is null terminated\n\n\t\t\t\t\t//screw these encodings, read it as ascii\n\t\t\t\t\tdata = utils.readAscii(view, offset, size - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//no encoding info, read it as ascii\n\t\t\t\tdata = utils.readAscii(view, offset, size);\n\t\t\t}\n\n\t\t\t//id3v2.4 is supposed to have encoding terminations, but sometimes\n\t\t\t//they don't? meh.\n\t\t\tdata = utils.trimNull(data);\n\n\t\t\treturn {\n\t\t\t\tid: id,\n\t\t\t\tsize: size + 10,\n\t\t\t\tcontent: data\n\t\t\t};\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvar idMap = {\n\t\tTALB: 'album',\n\t\tTCOM: 'composer',\n\t\tTIT1: 'title',\n\t\tTIT2: 'title',\n\t\tTPE1: 'artist',\n\t\tTRCK: 'track',\n\t\tTSSE: 'encoder',\n\t\tTDRC: 'year',\n\t\tTCON: 'genre'\n\t};\n\n\tvar endOfTags = offset + size,\n\t\tframes = {};\n\twhile (offset < endOfTags) {\n\t\tvar frame = readFrame(offset);\n\t\tif (!frame) {\n\t\t\tbreak;\n\t\t}\n\n\t\toffset += frame.size;\n\t\tif (!frame.content) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar id = idMap[frame.id] || frame.id;\n\t\tif (id === 'TXXX') {\n\t\t\tvar nullByte = frame.content.indexOf('\\u0000');\n\t\t\tid = frame.content.substring(0, nullByte);\n\t\t\tframes[id] = frame.content.substring(nullByte + 1);\n\t\t} else {\n\t\t\tframes[id] = frames[frame.id] = frame.content;\n\t\t}\n\t}\n\n\treturn frames;\n};","/home/travis/build/npmtest/node-npmtest-audio-metadata/node_modules/audio-metadata/bin/audio-metadata.js":"#!/usr/bin/env node\n\nvar fs = require('fs'),\n\taudioMetadata = require('../'),\n\tutil = require('util'),\n\targs = process.argv.slice(2),\n\ttype = 'id3v2',\n\tchunkSize = 512,\n\tquitAfter = chunkSize,\n\tcolorize = true,\n\tfiles = [],\n\ti;\n\nfunction usage() {\n\tconsole.log('Extract metadata from audio files');\n\tconsole.log();\n\tconsole.log('USAGE');\n\tconsole.log('audio-metadata --type <type> [options] file1 [file2...]');\n\tconsole.log();\n\tconsole.log('OPTIONS');\n\tconsole.log('--help,-h');\n\tconsole.log('  This help');\n\tconsole.log('--type,-t <type>');\n\tconsole.log('  One of \"id3v1\", \"id3v2\" or \"ogg\"');\n\tconsole.log('--chunk-size,-c <size>');\n\tconsole.log('  Read the file in chunks of <size>; default is 512');\n\tconsole.log('--quit-after,-q <length>');\n\tconsole.log('  Stop searching for metadata if nothing is found after ');\n\tconsole.log('  <length> bytes; default is 512');\n\tconsole.log('--no-colors,-z');\n\tconsole.log('  Don\\'t colorize the output');\n\tconsole.log();\n\tconsole.log('EXAMPLE');\n\tconsole.log('Search for metadata in the first 300 bytes in 100 byte increments');\n\tconsole.log(' audio-metadata -t id3v2 -c 100 -q 300 keepitoffmy.wav');\n}\n\nfor (i = 0; i < args.length; i++) {\n\tswitch (args[i]) {\n\t\tcase '-t':\n\t\tcase '--type':\n\t\t\ttype = args[++i];\n\t\t\tbreak;\n\t\tcase '-h':\n\t\tcase '--help':\n\t\t\tusage();\n\t\t\tprocess.exit(0);\n\t\t\tbreak;\n\t\tcase '-c':\n\t\tcase '--chunk-size':\n\t\t\tchunkSize = parseInt(args[++i]);\n\t\t\tbreak;\n\t\tcase '-q':\n\t\tcase '--quit-after':\n\t\t\tquitAfter = parseInt(args[++i]);\n\t\t\tbreak;\n\t\tcase '-z':\n\t\tcase '--no-colors':\n\t\t\tcolorize = false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfiles.push(args[i]);\n\t\t\tbreak;\n\t}\n}\n\nif (!type) {\n\tconsole.error('--type is required');\n\tprocess.exit(1);\n}\nif (!(type in { ogg: 1, id3v1: 1, id3v2: 1 })) {\n\tconsole.error('Unrecognized type: ' + type);\n\tprocess.exit(1);\n}\n\nif (!files.length) {\n\tconsole.error('At least one file must be specified');\n\tprocess.exit(1);\n}\nif (isNaN(chunkSize) || chunkSize < 64) {\n\tconsole.error('Invalid chunk size');\n\tprocess.exit(1);\n}\nif (isNaN(quitAfter)) {\n\tconsole.error('Invalid --quit-after value');\n\tprocess.exit(1);\n}\nif (chunkSize > quitAfter) {\n\tconsole.error('chunk size cannot be greater than quit after value');\n\tprocess.exit(1);\n}\n\ntry {\n\tfor (i = 0; i < files.length; i++) {\n\t\t//everything's done synchronously so things are printed in the expected order\n\t\tvar fd = fs.openSync(files[i], 'r'),\n\t\t\tbuffer = new Buffer(quitAfter),\n\t\t\tmetadata = null,\n\t\t\toffset = 0;\n\n\t\twhile (!metadata) {\n\t\t\tvar toRead = offset + chunkSize > quitAfter ? quitAfter - offset : chunkSize;\n\t\t\tif (!toRead) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar bytesRead = fs.readSync(fd, buffer, offset, toRead, offset);\n\t\t\tif (bytesRead === 0) {\n\t\t\t\t//EOF\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toffset += bytesRead;\n\t\t\tmetadata = audioMetadata[type](buffer);\n\t\t}\n\n\t\tfs.closeSync(fd);\n\n\t\tif (files.length > 1) {\n\t\t\tconsole.log(files[i] + ':');\n\t\t}\n\t\tif (metadata) {\n\t\t\tif (colorize) {\n\t\t\t\tconsole.log(util.inspect(metadata, false, null, true));\n\t\t\t} else {\n\t\t\t\tconsole.log(JSON.stringify(metadata, null, '  '));\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('no metadata found');\n\t\t}\n\n\t\tconsole.log();\n\t}\n\n\tprocess.exit(0);\n} catch (e) {\n\tconsole.error('An error occurred trying to read from a file');\n\tconsole.error('  ' + e.message);\n\tprocess.exit(1);\n}"}